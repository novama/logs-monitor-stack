networks:
  loki-net:
    driver: bridge

services:
  read:
    image: grafana/loki:latest
    container_name: loki-read
    hostname: read-loki.logs
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/config-template.yml
      - ./config/loki/prepare-config.sh:/etc/loki/prepare-config.sh
    entrypoint: ["/bin/sh", "-c", "sh /etc/loki/prepare-config.sh && loki -config.file=/etc/loki/config.yml -config.expand-env=true -target=read"]
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
      - write
    restart: unless-stopped
    networks: &loki-dns
      loki-net:
        aliases:
          - loki-net

  write:
    image: grafana/loki:latest
    container_name: loki-write
    hostname: write-loki.logs
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/config-template.yml
      - ./config/loki/prepare-config.sh:/etc/loki/prepare-config.sh
    entrypoint: ["/bin/sh", "-c", "sh /etc/loki/prepare-config.sh && loki -config.file=/etc/loki/config.yml -config.expand-env=true -target=write"]
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
      - backend
    restart: unless-stopped
    networks:
      <<: *loki-dns

  backend:
    image: grafana/loki:latest
    container_name: loki-backend
    hostname: backend-loki.logs
    ports:
      - "3100"
      - "7946"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/config-template.yml
      - ./config/loki/prepare-config.sh:/etc/loki/prepare-config.sh
    entrypoint: ["/bin/sh", "-c", "sh /etc/loki/prepare-config.sh && loki -config.file=/etc/loki/config.yml -config.expand-env=true -target=backend -legacy-read-mode=false"]
    restart: unless-stopped
    networks:
      - loki-net

  alloy:
    image: grafana/alloy-dev:latest
    container_name: alloy
    hostname: alloy.logs
    ports:
      - "12345:12345"
    volumes:
      - ./config/alloy/alloy-local-config.yml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - loki-net

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    hostname: promtail.logs
    volumes:
      - /var/log:/var/log
      - ./config/promtail:/etc/promtail
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - loki-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus.logs
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus-config.yml'
    restart: unless-stopped
    networks:
      - loki-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana.logs
    ports:
      - "3000:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_DEFAULT_INSTANCE_NAME=${GF_DEFAULT_INSTANCE_NAME}
      - GF_AUTH_ANONYMOUS_ORG_NAME=${GF_AUTH_ANONYMOUS_ORG_NAME}
      # SSL: Make sure to set the correct protocol and domain in the environment variable GF_SERVER_ROOT_URL
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL:-%(protocol)s://%(domain)s:%(http_port)s/}
      - GF_SERVER_DOMAIN=${GF_SERVER_DOMAIN}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_EMAIL=${GF_SECURITY_ADMIN_EMAIL}
      # Github OAuth variables
      - GF_AUTH_GITHUB_ENABLED=${GF_AUTH_GITHUB_ENABLED}
      - GF_AUTH_GITHUB_NAME=${GF_AUTH_GITHUB_NAME}
      - GF_AUTH_GITHUB_CLIENT_ID=${GF_AUTH_GITHUB_CLIENT_ID}
      - GF_AUTH_GITHUB_CLIENT_SECRET=${GF_AUTH_GITHUB_CLIENT_SECRET}
      - GF_AUTH_GITHUB_ALLOWED_DOMAINS=${GF_AUTH_GITHUB_ALLOWED_DOMAINS}
      - GF_AUTH_GITHUB_ALLOWED_ORGANIZATIONS=${GF_AUTH_GITHUB_ALLOWED_ORGANIZATIONS}
      - GF_AUTH_GITHUB_ROLE_ATTRIBUTE_PATH=${GF_AUTH_GITHUB_ROLE_ATTRIBUTE_PATH}
      - GF_AUTH_GITHUB_SCOPES=${GF_AUTH_GITHUB_SCOPES}
      # Azure AD OAuth variables
      - GF_AUTH_AZUREAD_ENABLED=${GF_AUTH_AZUREAD_ENABLED}
      - GF_AUTH_AZUREAD_NAME=${GF_AUTH_AZUREAD_NAME}
      - GF_AUTH_AZUREAD_CLIENT_ID=${GF_AUTH_AZUREAD_CLIENT_ID}
      - GF_AUTH_AZUREAD_CLIENT_SECRET=${GF_AUTH_AZUREAD_CLIENT_SECRET}
      - GF_AUTH_AZUREAD_SCOPES=${GF_AUTH_AZUREAD_SCOPES}
      - GF_AUTH_AZUREAD_AUTH_URL=${GF_AUTH_AZUREAD_AUTH_URL}
      - GF_AUTH_AZUREAD_TOKEN_URL=${GF_AUTH_AZUREAD_TOKEN_URL}
      - GF_AUTH_AZUREAD_ALLOWED_DOMAINS=${GF_AUTH_AZUREAD_ALLOWED_DOMAINS}
      - GF_AUTH_AZUREAD_ALLOWED_ORGANIZATIONS=${GF_AUTH_AZUREAD_ALLOWED_ORGANIZATIONS}
      - GF_AUTH_AZUREAD_ALLOW_SIGN_UP=${GF_AUTH_AZUREAD_ALLOW_SIGN_UP}
      - GF_AUTH_AZUREAD_ALLOW_ASSIGN_GRAFANA_ADMIN=${GF_AUTH_AZUREAD_ALLOW_ASSIGN_GRAFANA_ADMIN}
      - GF_AUTH_USE_REFRESH_TOKEN=${GF_AUTH_USE_REFRESH_TOKEN}
      - GF_AUTH_AZUREAD_USE_PKCE=${GF_AUTH_AZUREAD_USE_PKCE}
    volumes:
    # - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./config/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/ds.yml
      - ./config/grafana/wait-for-grafana.sh:/wait-for-it.sh:ro
      - ./config/grafana/update_grafana_default_org.sh:/update_org.sh:ro
    entrypoint: ["/bin/sh", "-c", "sh /wait-for-it.sh -- sh /update_org.sh & grafana-server"]
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - loki-net

  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio.logs
    ports:
      - "9010:9010"
      - "9011:9011"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    volumes:
      - loki-minio-data:/data
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server --console-address :9011 --address :9010 /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9010/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    restart: unless-stopped
    networks:
      - loki-net

  nginx:
    image: nginx:latest
    container_name: nginx-logs
    hostname: nginx.logs
    ports:
      - "80:80"
      # SSL: port 443. Uncomment the following line to enable SSL
      - "443:443"
      - "3100:3100"
    volumes:
      # - ./config/nginx/nginx-config.conf:/etc/nginx/nginx.conf
      # SSL: config file and path to certificates directory. Uncomment the following lines to enable SSL and comment the line above
      - ./config/nginx/nginx-config-ssl.conf:/etc/nginx/nginx.conf
      - ../grafana_ssl:/etc/grafana_ssl
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - read
      - write
    restart: unless-stopped
    networks:
      - loki-net

volumes:
  loki-minio-data:
    driver: local
    driver_opts:
      type: none
      device: ../data/minio
      o: bind
